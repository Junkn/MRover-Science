//#include "unistd.h"
#include "stm32f4xx.h"
#include "timer_conf.h"
#include "SPI_conf.h"
#include "ADC_conf.h"

/*	You will need the STM32F4 Standard Peripherals Library and not the STM32F4 HAL. */

/*	The send and receive buffers. The send buffer is 16bit and will eventually contain
	12bit data from the ADC. The receive buffer is of double size but only 8bit, so in
	fact the send and receive buffers are of equal size in memory, as SPI demands. */

__IO uint16_t aTxBuffer[3700] = {0};
__IO uint8_t aRxBuffer[7400] = {0}; 

/* 	ADC write buffer */
/* 	We will write to aTxBuffer instead */
//__IO uint16_t ADCRxBuffer[3700];

	uint8_t change_exposure_flag = 0;
	//uint8_t copy_data_flag = 0;
	uint8_t pulse_counter = 0;




//static void InitialiseSysTick();

int main(void)
{
 	/*!< At this stage the microcontroller clock setting is already configured, 
       this is done through SystemInit() function which is called from startup
       files (startup_stm32f40_41xxx.s/startup_stm32f427_437xx.s/startup_stm32f429_439xx.s)
       before to branch to application main. 
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f4xx.c file

     ############################################################
     If you don't set PLL_M to 16 in system_stm32f4xx.c and the
	 HSE_VALUE to 8000000 you are likely to get other frequencies
	 and periods than you expect and messed up communications.
     ############################################################
     */

/* GPIO Configuration
	GPIOA is for CCD driving pulses
	GPIOC is for ADC (CCD input)
	GPIOB is for SPI communication 	*/

/* TIM Configuration
	TIM2/5 are 32 bit and will serve the ICG and SH pulses that may require very long periods.
	TIM3/4 are 16 bit and will serve the fM (master clock) and ADC clock. 

	TIM2 drives ICG on PA1
	TIM3 drives fM on PA6 
	TIM4 paces the ADC
	TIM5 drives SH on PA0
	ADC-In is on PC3 */

/* SPI2 Configuration
	SCLK on PB13
	MISO on PB14
	MOSI on PB15
    GND on GND */

/* 	Set the initial exposure to a low */
	expset exposure;
	exposure.ICG_period = 56000;
	exposure.SH_period = 28;

/* 	aTxBuffer is a 16bit 3700 elements array 
	aRxBuffer is an 8bit 7400 elements array 
	
	There are only 3648 pixels + 46 dummies	to read, so the extras are just to play it safe.

	ADC writes to only aTxBuffer[3]-aTxBuffer[3696]. The 2 preceding and 2 traling
	elements are kept constant for data-validity checks.
	*/
	aTxBuffer[0] = 314;
	aTxBuffer[1] = 159;
	aTxBuffer[3698] = 265;
	aTxBuffer[3699] = 359;



/*	Initialise communication with the Raspberry Pi */
	SPI_Config();

/*	Initialise systick - mainly for debugging purposes */
//	InitialiseSysTick();

/*	Initialise TIM3 and TIM4 
	ADC is dependent on TIM4 so this must be initialised first 
	TIM3 drives fM on PA6  */
	TIM_3_4_Config();



/*	Initialise ADC
	The ADC and DMA are configured and started before all the timers that actually drive
	the CCD are configured and enabled. After the first cycle an interrupt created at
	the end of the DMA-transfer stops TIM4 which paces the ADC. 
		The	update interrupt from TIM2 restarts TIM4 and TIM2 is therefore not started 
	before configuration of	ADC+DMA.
		This of course means that the first reading is nonsensical. */
	ADC_Config();

/*	Initialise TIM2 and TIM5 */
/* 	The period of TIM2 and TIM5 are user controllable. Please read the comments inside 
	the function TIM_2_5_Config in timer_conf.c */
	TIM_2_5_Config(&exposure);



	while (1)
	{

/*	Check for data from the RPi and set new integrations settings */
		if (change_exposure_flag == 1)
		{
			change_exposure_flag = 0;
/*	Set pulse counter, we only want to read the CCD after the 2nd ICG-pulse. */
			pulse_counter = 0;
			
/* 	Combine the 2x 4 bytes in received data to 2x ints */
			exposure.ICG_period = aRxBuffer[10]<<24|aRxBuffer[11]<<16|aRxBuffer[12]<<8|aRxBuffer[13];
			exposure.SH_period = aRxBuffer[6]<<24|aRxBuffer[7]<<16|aRxBuffer[8]<<8|aRxBuffer[9];

/*	Disable TIM2 (ICG) and TIM5 (SH) before reconfiguring*/
			TIM_Cmd(TIM2, DISABLE);
			TIM_Cmd(TIM5, DISABLE);

/* 	Reconfigure TIM2 and TIM5 */
			TIM_2_5_Config(&exposure);

/*	Set counters close to expiration, as the integration times may be very long. 
	(For example: with an ICG-period of 300s we'd have to wait 600s for two ICG-
 	pulses if we don't cut the first one short.)
	The SH-period is slightly delayed to comply with the CCD's timing requirements. */
			TIM5->CNT = exposure.SH_period - 12;
			TIM2->CNT = exposure.ICG_period - 10;

		}


	}
}




/*
static void InitialiseSysTick()
{
    GPIO_InitTypeDef GPIO_InitStructure;
    RCC_ClocksTypeDef RCC_Clocks;
    //
    //  Initialise the peripheral clock.
    //
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    //
    //  Initialise the heartbeat GPIO port.
    //
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    //
    //    Setup the system tick for the heartbeat.
    //
    RCC_GetClocksFreq(&RCC_Clocks);
    SysTick_Config(RCC_Clocks.HCLK_Frequency / 10);
}

*/

#ifdef  USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  while (1)
  {}
}
#endif
