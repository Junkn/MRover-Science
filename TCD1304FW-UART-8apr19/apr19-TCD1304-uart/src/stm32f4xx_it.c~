#include "stm32f4xx_it.h"
#include "main.h"

/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

//extern __IO uint16_t aTxBuffer[3700];
extern __IO uint8_t aRxBuffer[7400];
extern uint8_t change_exposure_flag;
extern uint8_t pulse_counter;
//extern	__IO uint16_t puffer[6];


/**
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}

/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
}

/**
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
}

/**
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
}

/**
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
}

/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}

/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}

/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}

/**
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
//	GPIOA->ODR ^= GPIO_Pin_5;
}

/******************************************************************************/
/*                 STM32F4xx Peripherals Interrupt Handlers                   */
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f40xx.s/startup_stm32f427x.s).                         */
/******************************************************************************/

void DMA1_Stream4_IRQHandler(void)
{
/* 	DMA1 takes care of the SPI transfers. Any calls after SPI-communication 
	should be placed here. */

/* Test on DMA Stream Transfer Complete interrupt */
	if(DMA_GetITStatus(DMA1_Stream4, DMA_IT_TCIF4))
	{
/* 	Clear DMA Stream Transfer Complete interrupt pending bit */
    DMA_ClearITPendingBit(DMA1_Stream4, DMA_IT_TCIF4);

/* Check for important data from the user */
 	if ((aRxBuffer[0]==3)&&(aRxBuffer[1]==5)&&(aRxBuffer[2]==8)&&(aRxBuffer[3]==13)&&(aRxBuffer[4]==21))
		{
		aRxBuffer[0] = 0;
		change_exposure_flag = 1;
/* Only for debugging - not desired during actual runtime
		// Flash the LED so we can see if transmission is working
		int n = 0;
		for (n = 0; n < 1500000; n++)
			GPIOA->ODR ^= GPIO_Pin_5;

*/
		}
  }
}

void DMA2_Stream0_IRQHandler(void)
{
/*	The DMA2 handles data from the ADC. After each completed read of the CCD
	this function is called. */

/* Test for DMA Stream Transfer Complete interrupt */
	if(DMA_GetITStatus(DMA2_Stream0, DMA_IT_TCIF0))
	{
/* Clear DMA Stream Transfer Complete interrupt pending bit */
		DMA_ClearITPendingBit(DMA2_Stream0, DMA_IT_TCIF0);  
    
/* Stop TIM4 and thus the ADC */
		TIM_Cmd(TIM4, DISABLE);
	}
}


void TIM2_IRQHandler(void)
{
/*	TIM2 controls the ICG-pulse. 

	The CCD is read only after the 2nd ICG pulse.

	The 1st ICG pulse serves to clear the pixels, after which
	the CCD starts integrating with the desired integration time.
	After the 2nd ICG pulse the pixels are clocked out and read
	by the ADC. */

/* Clear TIM2 update interrupt */
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);

/*	Increase pulse counter */
	pulse_counter++;

/*	Check pulse counter */
	if (pulse_counter == 2){
/* Restart the DMA - keeps the ADC running - this is new */
		//DMA_Cmd(DMA2_Stream0,ENABLE);
 		//ADC_DMACmd(ADC1, ENABLE);  
		TIM_Cmd(TIM4, ENABLE);
	}

/* 	The pulse counter will overflow eventually, so prevent that */
	if (pulse_counter > 2){
		pulse_counter = 3;
	}
}

/**
  * @brief  This function handles PPP interrupt request.
  * @param  None
  * @retval None
  */
/*void PPP_IRQHandler(void)
{
}*/

/**
  * @}
  */ 

/**
  * @}
  */ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
