# -*- coding: utf-8 -*-
"""
Created on Sun Dec  8 10:39:52 2019

@author: Gabe
"""

import numpy as np
import spectral as spy
from spectral.database.ecostress import EcostressDatabase
import random
import matplotlib.pyplot as plt

#db = spy.EcostressDatabase.create('spec_lib.db', 'ecospeclib-all')

db = EcostressDatabase('spec_lib.db')

#db.print_query('SELECT COUNT() FROM Samples WHERE Name LIKE "%e%"')
#db.print_query('SELECT SampleID, Name FROM Samples WHERE Name LIKE "%pyr%"')

plot_it = False



if plot_it:
    f = plt.figure()

    s = db.get_signature(1333)

    import pylab as plt

    plt.plot(s.x, s.y)
    print(len(s.x))
    
    plt.title(s.sample_name)

    plt.xlabel('Wavelength (Î¼m)')
    plt.ylabel('Reflectance (%)')

    plt.grid(1)
    
    plt.show()
    
measured_x = [.41, .435, .46, .485, .51, .535, .56, .585, .61, .645, .68, .705, .73, .76, .81, .86, .9, .94]
test_spectrum = [23.07,23.11,23.1,23.22,23.32,23.38,23.89,24.54,25.3,26.14,27.47,28.46,29.64,31.13,33.15,34.28,34.71,35.03]
#for n in range(len(measured_x)):
#    test_spectrum.append(random.uniform(.45,.5))
#print(test_spectrum)

spectra_list = []



for n in range(1,3447):
    s = db.get_signature(n)
    if min(s.x)<.43:
        spectra_list.append(n)
#print(spectra_list)        
####take experimental and known wavelengths, see if they're close enough
        
def find_nearest(array, value):
    array = np.asarray(array)
    idx = (np.abs(array - value)).argmin()
    return(array[idx])
    
def get_sum_squerrors(spectra, experimental_spectrum, experimental_wavelengths):
    spectrum_to_order = []
    for val in spectra:
        specimen = db.get_signature(val)
        known_wavelengths = specimen.x
        known_spectrum = specimen.y
        squerror = 0
        for x in range(len(experimental_wavelengths)):
            known_value = known_spectrum[known_wavelengths.index(find_nearest(known_wavelengths, experimental_wavelengths[x]))]
            squerror += (known_value - experimental_spectrum[x])**2
        
        my_tuple = (val, squerror)
        spectrum_to_order.append(my_tuple)
        
    return spectrum_to_order

def sort_spectra(spectra):
    return(sorted(spectra, key = lambda x: x[1]))    
    
print(sort_spectra(get_sum_squerrors(spectra_list, test_spectrum, measured_x)))    
"""
def compare(exp_spectrum, known_spectrum, exp_wavelengths, known_wavelengths, epsilon):
    for x in range(len(exp_wavelengths)):
        known_value = known_spectrum[known_wavelengths.index(find_nearest(known_wavelengths, exp_wavelengths[x]))]
        diff = known_value - exp_spectrum[x]
        if diff > epsilon:
            return False
    return True
"""
"""takes a list of spectra, and returns a list of spectra that fit compare criteria
within epsilon of experimental values.
"""
"""
def prune_spectra(spectra_in, epsilon, measured_x, experimental_spectrum):
    spectra_out = []
    for value in spectra_in:
        spec = db.get_signature(value)
        if (compare(experimental_spectrum, spec.y, measured_x, spec.x, epsilon)):
            spectra_out.append(value)
    return spectra_out

eps = 2
d_eps = .2
results_ind = []
old_spectra_out = spectra_list
    
while len(old_spectra_out) > 5:
    spectra_out = prune_spectra(old_spectra_out, eps, measured_x, test_spectrum)
    #print(spectra_out)
    print(len(spectra_out))
    if len(spectra_out)==0:
        eps += d_eps/10
    if len(spectra_out)>5:
        eps -= d_eps
        old_spectra_out = spectra_out
    if 0<len(spectra_out)<=5:
        old_spectra_out = spectra_out
    
###make plots for each returned spectrum vs data
for n in range(len(spectra_out)):
    fig = plt.figure(n)
    spec = db.get_signature(spectra_out[n])
    plt.plot(spec.x[spec.x.index(find_nearest(spec.x, .41)):spec.x.index(find_nearest(spec.x, .94))], spec.y[spec.x.index(find_nearest(spec.x, .41)):spec.x.index(find_nearest(spec.x, .94))])
    plt.plot(measured_x, test_spectrum)
    plt.title(spec.sample_name)    
"""
print('Done')    
        
