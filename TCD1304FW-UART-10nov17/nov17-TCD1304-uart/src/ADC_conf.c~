#include "stm32f4xx.h"

//extern __IO uint16_t ADCRxBuffer[3700];
extern __IO uint16_t aTxBuffer[3700];

void ADC_Config(void)
{
	ADC_InitTypeDef			ADC_InitStructure;
	ADC_CommonInitTypeDef	ADC_CommonInitStructure;
	DMA_InitTypeDef     	DMA_InitStructure;
	GPIO_InitTypeDef    	GPIO_InitStructure;
	NVIC_InitTypeDef		NVIC_InitStructure;


/*	Enable ADC1, DMA and GPIO clocks  */
/*	Only DMA2 can serve ADC1 */ 
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
  

/*	DMA2 Stream0 channel0 configuration **************************************/
/* 	DMA2 is set up to read 3694 values (the number of pixels incl dummies on the TCD1304)
	It's set to circular mode so the memory pointer is reset after a full read of the CCD
	Datasize is set to Halfword (ie. 16b) as the ADC is 12b	*/
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;   
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
/* 	Write to the SPI transmit buffer instead */
//	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADCRxBuffer;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&aTxBuffer[3];
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	DMA_InitStructure.DMA_BufferSize = 3694;			
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; 	
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;			
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;	
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;			
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;	
//	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;	
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_Init(DMA2_Stream0, &DMA_InitStructure);
	DMA_Cmd(DMA2_Stream0, ENABLE);

/*	DMA2 interrupt configuration */
/*	An interrupt is generated at the end of each reading of the CCD */
	DMA_ITConfig(DMA2_Stream0, DMA_IT_TC, ENABLE);

	NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

/*	Configure ADC1 Channel13 pin (PC3) as analog input ******************************/
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;	
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

/*	ADC Common Init **********************************************************/
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);

/*	ADC1 Init ****************************************************************/
/*	TIM4 Ch4 is used as external trigger */
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T4_CC4; 
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = 1;
	ADC_Init(ADC1, &ADC_InitStructure);

/*	ADC1 regular channel13 configuration **************************************/
/*	Since the pixel values come out at 350 kHz the maximum time the ADC has for 
	each conversion is:
		t_pix = (350 kHz)⁻¹ = 2.86 µs
	The ADC runs with a typical speed of 30 MHz, so each cycle takes:
		t_ac = (30 MHz)⁻¹ = 33 ns
	With a resolution of 12 bit the conversion time is:
		t_c = 12·33 ns = 0.40 µs
	This gives 2.46 µs for sampling each pixel. However the ADC needs time for
	stabilization between each conversion. This is typically around 2 µs, which
	leaves just around 0.4 µs for sampling. In ADC clock cycles this corresponds to
		n = 0.4 µs / 33 ns = 12
	The nearest value for the ADC sampling time is 3 cycles.

	TIM3 (fM) and TIM4 (ADC-clock) are not in phase. If you suspect the ADC is 
	reading across two pixels, try and increase TIM2 pulse from 7 to 8. This will
	shift the pixel readings one period in relation to fM (and 1/4 of a period of
	the ADC-clock). */
 	ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1, ADC_SampleTime_3Cycles); 

/*	Enable DMA request after last transfer (Single-ADC mode) */
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);

/*	Enable ADC1 DMA */
	ADC_DMACmd(ADC1, ENABLE);

/*	Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);

/*	Start AD conversion */
	//ADC_SoftwareStartConv(ADC1);
}
