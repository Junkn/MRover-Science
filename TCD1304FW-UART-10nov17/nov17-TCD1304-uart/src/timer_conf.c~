#include "stm32f4xx.h"
#include "timer_conf.h"

void TIM_3_4_Config(void)
{
	GPIO_InitTypeDef		GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef	TIM_TimeBaseStructure;
	TIM_OCInitTypeDef		TIM_OCInitStructure;
  
/*	TIM3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
  
/*	TIM4 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
  
/*	GPIOB clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
  
/*	GPIOB Configuration: TIM3 CH1 (PA6) */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
	GPIO_Init(GPIOA, &GPIO_InitStructure); 

/*	Connect TIM pins to AF2 */
 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_TIM3);

/*	TIM3 Time base configuration */
/*  Prescaler is 1 (that is 1 - 1), so timer clock is 42 MHz = 42MHz / 1 
	Period is 30 (that is 30 -1), so timer frequency is 1.4 MHz = 42 MHz / 30
	Pulse is 15, so the duty cycle is 50% = 15 / 30  */
	TIM_TimeBaseStructure.TIM_Prescaler = 1 - 1;	
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = 30 - 1;	
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

/*	TIM4 Time base configuration 
	Set TIM4's frequency to a 1/4 of TIM3's.
	Period is 4x 30 = 120, so the frequency is 350kHz = 42MHz / 120
	Pulse is 60 giving a duty cycle of 50% = 60 / 120  */
	//TIM_TimeBaseStructure.TIM_Prescaler = 1 - 1;				
	//TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	//TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = 120 - 1;				
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

/*	TIM3 PWM1 Mode configuration: Channel3 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 15;
/*	Change this to Low if 74HC04 is in place */					
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);

	TIM_ARRPreloadConfig(TIM3, ENABLE);


/*	TIM4 PWM1 Mode configuration: Use TIM4 channel4 as this can pace ADC1*/
	//TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	//TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 10;						
//	TIM_OCInitStructure.TIM_Pulse = 60;						
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
/* new from forums - apparently needed to use TIM4 as ADC-trigger */
  	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;
  	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High; 
  	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
  	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;
/* end of new stuff */


	TIM_OC4Init(TIM4, &TIM_OCInitStructure);
	TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);

	TIM_ARRPreloadConfig(TIM4, ENABLE);


/*	TIM3 enable counter */
	TIM_Cmd(TIM3, ENABLE);

/*	TIM4 enable counter */
	TIM_Cmd(TIM4, ENABLE);
}



void TIM_2_5_Config(expset *exposure)
{
/* ---------------------------------------------------------------------------

    TIM2 on PA1 runs the ICG-pulse.
    TIM5 on PA0 runs the SH-pulse

  The following is based on the timing diagrams in the datasheet for TCD1304.

  1) SH must go high with a delay (t2) of between 100 and 1000 ns after ICG goes low.
  2) SH must stay high for (t3) a minium of 1000 ns.
  3) ICG must go high with a delay (t1) of minimum 1000 ns after SH goes low.
  4) ICG must go high when fM is high.

  To help achieve these requirements both timer clocks are set to the period length of fM.
  Furthermore the period of TIM2 should be a multiple of the period of TIM5.

  ####################################################################
  Don't forget that fm, SH and ICG are inverted by the TC74HC04 before
  reaching the CCD. 

  Set TIM_OCInitStructure.TIM_OCPolarity:
     High for TIM3 and TIM5
     Low for TIM2
  when a 74HC04 is NOT used.

  Set TIM_OCInitStructure.TIM_OCPolarity:
     Low for TIM3 and TIM5
     High for TIM2
  when a 74HC04 IS in use.
  ####################################################################


  Notes on the SH and ICG pulses:
     The timing diagrams in the datasheet for TCD1304 can be a little confusing, and
     it doesn't get better that there are two of them.

     The ICG pulse marks the start of each read, so even if it's named 'Integration
     Clear Gate', it seems to function more as a shift gate. Since we want to be able
     to complete a full read of the entire CCD before starting a new read, the period 
     of ICG must be at least (including dummy pixels):
        3694 / 350 kHz = 10.6 ms
     which with a timer clock of 1.4 MHz translates to
        10.6 ms * 1.4 MHz = 14776
     However, the SH and ICG pulses must conform to the four criteria above, so it's
     advisable to confine the ICG periods to full multiples of the SH period.

     The SH pulse defines the integration time, and according to the datasheet this
     must be >10 us, so the SH period must be at least:
        10 us * 1.4 MHz = 14
     The upper limit of the SH period is given by the ICG period, as each ICG pulse
     must coincide with an SH pulse. It seems that it's the SH signal that acts as 
     the electronic shutter and not the ICG signal.

	At each ICG pulse TIM2 creates an interrupt which will start the ADC+DMA.


     ###############################################################
     In the following code I advise to only change the values of 
     TIM_Period (and TIM_OCPolarity if you follow the schematic in
     the datasheet and put a 74HC04 between your GPIOs and the CCD).
     ###############################################################

  --------------------------------------------------------------------------- */   


	GPIO_InitTypeDef 		GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef	TIM_TimeBaseStructure;
	TIM_OCInitTypeDef		TIM_OCInitStructure;
	NVIC_InitTypeDef		NVIC_InitStructure;

  
/* 	TIM2 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);

/* 	TIM5 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);

/* 	GPIOA clock enable */
/*	GPIOA is already clocked since TIM3 was initialised first */	
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
  
	/* GPIOA Configuration: TIM2 CH2 (PA1) and TIM5 CH1 (PA0) */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_0;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
	GPIO_Init(GPIOA, &GPIO_InitStructure); 

/* 	Connect TIM pins to AF1 */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
/* 	Connect TIM pins to AF2 */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM5);

/* 	TIM2 time base configuration */
/* 	The Prescaler is set to 30 (that is 30 - 1), so TIM2 and TIM5's clocks are equal to the period of TIM3
	Some numbers to consider for the period of the timers:	
		ICG (TIM2): t_read = Period / 1.4 MHz
		SH (TIM5): t_int = Period / 1.4 MHz  
	Keep the ICG period to multiples of the SH period */
	TIM_TimeBaseStructure.TIM_Prescaler = 30 - 1;			
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = exposure->ICG_period - 1;			
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);

/*	TIM5 time base configuration */
	TIM_TimeBaseStructure.TIM_Period = exposure->SH_period - 1;	
	TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure);


/*	Set parameters for TIM2 PWM1 Mode configuration: Channel2 */
/* 	Pulse is 7 so the duration of the duty cycle is 7 / 1.4 MHz = 5 us 
	Change the Polarity to High if 74HC04 is in place */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 7;						 
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;  
	TIM_OC2Init(TIM2, &TIM_OCInitStructure);

	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
	TIM_ARRPreloadConfig(TIM2, ENABLE);

/*	Set parameters for TIM5 PWM1 Mode configuration: Channel1 */
/* 	Pulse is 2 so the duration of the duty cycle is 2 / 1.4 MHz = 1.4 us 
	Change the Polarity to Low if 74HC04 is in place */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 2;						 
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;

	TIM_OC1Init(TIM5, &TIM_OCInitStructure);

	TIM_OC1PreloadConfig(TIM5, TIM_OCPreload_Enable);
	TIM_ARRPreloadConfig(TIM5, ENABLE);

/*	Clear TIM2 update pending flags */
	TIM_ClearFlag(TIM2, TIM_FLAG_Update);

/*	Configure two bits for preemption priority */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

/*	Enable the TIM2 Interrupt. Interrupt routine is located in stm32f4xx_it.c */
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

/*	If not called the timers will start from half their period.
	To minimize delays before recording, TIM_setcounter() is 
	called for TIM2 and TIM5. */
//	TIM_setcounter();



/* 	TIM2 enable counter */
	TIM_Cmd(TIM2, ENABLE);

/* 	TIM5 enable counter */
	TIM_Cmd(TIM5, ENABLE);
}

